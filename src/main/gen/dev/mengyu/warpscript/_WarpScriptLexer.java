/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.mengyu.warpscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.mengyu.warpscript.psi.WarpScriptTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>WarpScriptLexer.flex</tt>
 */
public class _WarpScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15104 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\13\1\21\3\13\1\21\71\13\1\22\1\13\1\23\1\0\1\24\1\25\12"+
    "\0\1\20\5\0\1\26\1\27\1\30\1\31\2\13\1\32\11\13\1\33\21\13\1\23\1\34\24\13"+
    "\1\12\3\13\1\21\1\35\1\12\4\13\5\0\1\13\1\33\1\36\1\0\3\13\2\37\3\0\1\13\1"+
    "\37\7\13\1\12\1\13\1\22\14\13\1\40\1\24\1\12\1\41\1\13\1\42\2\0\6\13\1\0\1"+
    "\43\14\13\1\23\1\0\5\13\1\37\1\44\1\17\3\13\1\34\1\13\1\24\2\0\3\13\1\45\10"+
    "\0\2\13\1\26\1\46\2\0\1\47\1\13\1\50\1\23\11\13\1\40\1\13\1\26\1\41\1\13\1"+
    "\51\1\13\1\12\1\13\1\40\1\42\1\52\2\13\1\53\1\54\1\55\1\42\1\56\1\57\1\60"+
    "\1\51\1\13\1\23\1\0\1\61\1\62\1\52\2\13\1\53\1\63\1\22\1\62\1\64\1\35\1\65"+
    "\1\66\1\13\1\46\1\0\1\61\1\33\1\32\2\13\1\53\1\67\1\55\1\33\1\70\1\45\1\0"+
    "\1\51\1\13\1\0\1\35\1\61\1\42\1\52\2\13\1\53\1\67\1\55\1\42\1\64\1\66\1\60"+
    "\1\51\1\13\1\35\1\0\1\71\1\72\1\73\1\74\1\75\1\72\1\13\1\22\1\72\1\76\1\77"+
    "\1\0\1\66\1\13\2\0\1\40\1\26\1\53\2\13\1\53\1\13\1\55\1\26\1\76\1\100\1\37"+
    "\1\51\1\13\2\0\1\40\1\26\1\53\2\13\1\53\1\40\1\55\1\26\1\76\1\100\1\30\1\51"+
    "\1\13\1\101\1\0\1\61\1\26\1\53\4\13\1\102\1\26\1\103\1\47\1\57\1\51\1\13\1"+
    "\0\1\34\1\71\1\13\1\21\1\34\2\13\1\32\1\104\1\21\1\57\1\105\1\13\1\66\1\13"+
    "\1\106\1\0\1\12\6\13\1\37\1\21\1\20\1\13\1\23\4\0\1\107\1\110\1\47\1\12\1"+
    "\111\1\71\1\13\1\112\1\105\1\20\1\13\1\113\4\0\1\45\3\0\1\13\1\23\2\0\1\13"+
    "\1\12\3\13\1\24\1\12\1\13\1\23\2\13\1\12\3\13\1\24\10\0\6\13\1\21\1\52\1\13"+
    "\1\23\2\13\1\102\1\114\2\13\1\21\1\30\1\13\1\115\4\13\1\33\1\20\5\13\1\116"+
    "\51\13\1\73\1\21\1\73\5\13\1\73\4\13\1\73\1\21\1\73\1\13\1\21\7\13\1\73\10"+
    "\13\1\62\4\0\2\13\2\0\12\13\2\46\1\12\114\13\1\42\2\13\1\117\2\13\1\37\11"+
    "\13\1\72\1\13\1\45\1\13\1\26\1\120\1\0\2\13\1\120\1\0\2\13\1\120\1\0\1\13"+
    "\1\26\1\121\1\0\6\13\1\51\2\13\1\45\1\57\1\122\1\13\1\23\4\0\1\13\1\23\13"+
    "\13\1\0\5\13\1\37\10\13\1\46\1\0\3\13\1\21\1\13\1\120\1\13\1\45\1\66\4\13"+
    "\1\46\1\24\1\0\5\13\1\120\3\13\1\23\1\13\1\23\4\0\3\13\1\120\7\13\1\21\1\12"+
    "\1\13\1\24\1\0\1\13\1\23\1\13\1\23\1\57\13\0\6\13\1\40\1\13\1\40\1\120\1\13"+
    "\1\23\4\0\5\13\1\113\6\13\1\33\1\13\1\23\1\0\6\13\1\46\1\0\1\13\1\55\5\13"+
    "\1\46\1\13\1\45\13\0\1\123\1\124\1\0\30\13\4\0\1\57\1\13\1\24\1\0\42\13\2"+
    "\46\4\13\2\46\1\13\1\125\3\13\1\46\6\13\1\26\1\105\1\126\1\24\1\51\1\120\1"+
    "\13\1\24\1\126\1\24\1\127\1\130\1\0\1\45\1\0\1\131\5\0\1\132\2\0\1\35\1\57"+
    "\2\0\1\13\1\24\14\0\1\133\1\34\1\104\1\134\1\25\1\135\1\13\1\113\1\43\1\136"+
    "\2\0\5\13\1\45\144\0\1\66\6\13\1\23\42\0\5\13\1\21\5\13\1\21\20\13\1\24\1"+
    "\137\1\106\1\0\4\13\1\33\1\20\7\13\1\57\2\0\2\13\1\21\1\0\10\21\4\13\5\0\1"+
    "\57\72\0\1\140\3\0\1\12\1\23\1\134\1\24\1\12\11\13\1\21\1\43\1\12\12\13\1"+
    "\116\1\43\4\13\1\46\1\12\12\13\1\21\2\0\3\13\1\37\6\0\170\13\1\46\11\0\72"+
    "\13\1\46\5\0\21\13\1\24\10\0\5\13\1\46\41\13\1\24\3\13\1\120\2\0\5\13\1\21"+
    "\1\47\1\141\16\13\4\0\1\57\1\13\1\34\14\13\1\52\3\13\1\21\1\13\7\0\1\57\1"+
    "\13\1\142\1\116\3\13\3\0\6\13\1\120\1\0\10\13\1\104\1\0\1\13\1\23\2\0\1\34"+
    "\1\143\5\13\1\37\4\13\1\37\1\0\3\13\1\24\6\13\1\116\1\13\1\0\1\57\1\13\1\23"+
    "\1\26\2\13\1\21\6\13\1\21\1\0\1\13\1\46\1\13\1\23\2\13\1\21\1\144\7\13\1\21"+
    "\1\145\2\0\1\146\2\13\1\147\1\0\3\150\1\0\2\21\5\13\1\116\1\46\1\0\17\13\1"+
    "\37\1\13\1\23\64\13\1\120\1\0\2\13\1\21\1\50\5\13\1\120\40\0\55\13\1\46\15"+
    "\13\1\23\4\0\1\21\1\0\1\50\1\43\1\13\1\53\1\21\1\105\1\151\15\13\1\23\3\0"+
    "\1\50\54\13\1\46\2\0\10\13\1\34\6\13\5\0\1\13\1\120\16\0\1\26\20\13\1\24\2"+
    "\0\1\13\1\23\1\12\2\13\1\37\1\12\2\13\1\37\1\66\12\13\1\21\3\34\1\152\4\0"+
    "\1\13\1\40\2\13\1\21\2\13\1\153\1\13\1\46\1\13\1\46\4\0\17\13\1\37\10\0\6"+
    "\13\1\24\41\0\3\13\1\24\6\13\1\45\5\0\4\13\2\0\3\13\1\37\5\13\1\37\3\13\1"+
    "\46\4\13\1\120\1\13\1\134\5\0\23\13\1\46\1\13\1\23\4\13\1\120\4\13\1\120\5"+
    "\13\1\0\6\13\1\120\23\0\46\13\1\21\1\0\2\13\1\46\1\0\1\13\23\0\1\46\1\53\4"+
    "\13\1\33\1\154\2\13\1\46\1\0\2\13\1\21\1\0\3\13\1\21\10\0\2\13\1\155\1\0\2"+
    "\13\1\46\1\0\3\13\1\23\10\0\7\13\1\66\10\0\1\124\1\47\1\40\1\12\2\13\1\120"+
    "\5\0\3\13\1\24\3\13\1\24\4\0\1\13\1\12\2\13\1\24\3\0\6\13\1\46\1\0\2\13\1"+
    "\46\1\0\2\13\1\37\1\0\2\13\1\23\15\0\11\13\1\45\6\0\6\13\1\37\1\0\6\13\1\37"+
    "\41\0\10\13\1\46\3\0\1\66\1\13\2\0\1\34\6\13\1\45\2\0\3\13\1\45\1\13\1\23"+
    "\6\13\1\72\1\13\2\0\4\13\1\156\1\0\10\13\1\157\1\0\1\13\1\160\4\0\2\13\1\32"+
    "\3\13\1\42\1\30\10\0\1\21\1\135\1\13\1\33\1\13\1\45\7\13\1\45\1\13\1\23\1"+
    "\40\1\42\1\52\2\13\1\53\1\67\1\55\1\42\1\64\1\77\1\43\1\120\23\0\10\13\1\142"+
    "\1\37\1\13\1\23\4\0\10\13\1\161\1\0\1\13\1\23\24\0\6\13\1\46\1\21\3\0\1\46"+
    "\4\0\7\13\1\21\1\162\1\0\1\13\1\23\4\0\6\13\1\46\1\0\1\13\1\23\6\0\3\13\1"+
    "\55\1\13\1\37\1\13\1\23\54\0\11\13\1\23\1\0\1\57\70\0\7\13\1\45\40\0\1\13"+
    "\1\53\4\13\2\21\1\45\1\0\1\13\1\23\2\0\1\34\3\13\1\34\2\13\1\12\1\21\51\0"+
    "\63\13\1\23\14\0\15\13\1\21\2\0\30\13\1\120\27\0\5\13\1\21\72\0\10\13\1\21"+
    "\67\0\7\13\1\45\3\13\1\21\1\13\1\23\14\0\3\13\1\46\2\0\6\13\1\21\1\0\1\120"+
    "\1\0\1\13\1\23\1\50\2\13\1\43\2\13\56\0\10\13\1\24\1\0\5\13\1\21\2\0\1\50"+
    "\1\13\10\0\1\45\3\0\75\13\1\24\2\0\36\13\1\37\41\0\1\23\77\0\15\13\1\37\1"+
    "\13\1\24\1\13\1\45\1\13\1\136\54\0\12\13\1\26\10\13\1\26\1\163\1\123\1\13"+
    "\1\164\1\40\7\13\1\33\1\102\2\26\3\13\1\165\1\105\1\34\1\53\51\13\1\46\3\13"+
    "\1\53\2\13\1\116\3\13\1\116\2\13\1\26\3\13\1\26\2\13\1\21\3\13\1\21\3\13\1"+
    "\53\3\13\1\53\2\13\1\116\1\51\6\13\1\21\2\13\1\52\1\151\1\37\72\0\30\13\1"+
    "\24\7\0\10\13\1\141\1\0\1\13\1\23\24\0\1\40\3\13\1\107\1\12\1\116\1\166\1"+
    "\133\1\167\1\107\1\125\1\107\2\116\1\65\1\13\1\32\1\13\1\120\1\61\1\32\1\13"+
    "\1\120\116\0\3\13\1\23\3\13\1\23\3\13\1\23\16\0\32\13\1\21\5\0\106\13\1\24"+
    "\1\0\33\13\1\46\120\13\1\23\53\0\3\13\1\46\74\0");

  /* The ZZ_CMAP_A table has 960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\2\0\1\2\1\14\1\11\1\4\1\24\1\23\1\14\1\7\1\21\1\22\4\14\1\6"+
    "\1\3\12\5\2\14\1\12\1\14\1\13\1\14\1\25\1\36\3\14\1\34\1\32\2\14\1\31\2\14"+
    "\1\30\1\14\1\26\3\14\1\35\1\37\1\33\1\27\5\14\1\17\1\10\1\20\2\14\1\0\22\14"+
    "\1\15\1\14\1\16\1\14\6\0\1\1\2\0\1\2\11\0\1\14\12\0\1\14\2\0\7\14\1\0\2\14"+
    "\4\0\4\14\6\0\5\14\7\0\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6"+
    "\0\1\14\1\0\3\14\1\0\1\14\1\0\4\14\1\0\13\14\1\0\1\14\2\0\6\14\1\0\1\14\7"+
    "\0\2\14\1\0\2\14\1\0\4\14\5\0\4\14\1\0\4\14\4\0\10\14\2\0\1\14\5\0\3\14\4"+
    "\0\2\14\2\0\1\14\7\0\6\14\6\0\4\14\3\0\11\14\2\0\3\14\2\0\6\14\1\0\7\14\1"+
    "\0\1\14\3\0\4\14\3\0\4\14\2\0\2\14\1\0\1\14\10\0\1\14\4\0\2\14\1\0\1\14\1"+
    "\0\3\14\1\0\6\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\1\14\2\0\2\14\4\0\4\14\1\0"+
    "\1\14\7\0\3\14\1\0\2\14\1\0\5\14\1\0\2\14\5\0\2\14\1\0\6\14\3\0\3\14\1\0\4"+
    "\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\1\14\1\0\3\14\3\0\1\14\6\0\1\14"+
    "\5\0\2\14\2\0\2\14\5\0\3\14\2\0\4\14\1\0\3\14\1\0\1\14\1\0\4\14\1\0\1\14\2"+
    "\0\5\14\1\0\1\14\3\0\2\14\5\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\3\0"+
    "\3\14\1\0\1\14\1\0\3\14\1\0\3\14\2\0\2\14\2\0\5\14\5\0\4\14\2\0\2\14\2\0\3"+
    "\14\1\0\4\14\1\2\13\14\4\0\1\14\1\0\2\14\10\0\1\14\4\0\4\14\1\0\6\14\1\0\2"+
    "\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\2\0\3\14\1\0\2\14\13\2\5\0\2\1\5\0"+
    "\1\2\7\0\1\2\2\0\1\14\4\0\1\14\1\0\5\14\2\0\1\14\1\0\4\14\1\0\3\14\4\0\1\14"+
    "\4\0\4\14\1\0\1\2\4\0\7\14\3\0\3\14\1\0\3\14\1\0\1\14\3\0\1\14\1\0\1\14\4"+
    "\0\1\14\3\0\3\14\1\0\1\14\10\0\3\14\4\0\4\14\3\0\6\14\1\0\2\14\1\0\2\14\1"+
    "\0\2\14\2\0\3\14\3\0\3\14\1\0\2\14\1\0\2\14\3\0\1\14\2\0\4\14\1\0\2\14\2\0"+
    "\3\14\3\0\1\14\2\0\4\14\3\0\3\14\1\0\1\14\3\0\2\14\2\0\2\14\1\0\2\14\3\0\1"+
    "\14\5\0\1\14\2\0\2\14\1\0\2\14\1\0\1\14\1\0\5\14\1\0\4\14\2\0\1\14\1\0\1\14"+
    "\5\0\1\14\1\0\1\14\1\0\3\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\1\2\2"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\1"+
    "\1\14\1\15\4\1\1\16\1\0\1\17\4\0\1\20"+
    "\1\21\4\1\2\0\1\1\1\22\2\1\1\23\1\24"+
    "\1\25\1\1\1\26\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\u0140\0\40\0\40\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\340\0\40\0\u0200\0\u0100\0\u0220\0\u0240\0\300\0\300"+
    "\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0\0\u0300\0\u0320\0\u0340"+
    "\0\u0360\0\u0380\0\40\0\300\0\300\0\u03a0\0\300\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\2\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\7\1\25\1\26"+
    "\1\27\4\7\41\0\2\3\40\0\1\5\1\0\2\7"+
    "\1\0\1\7\1\0\12\7\2\0\12\7\1\5\1\0"+
    "\36\5\3\0\1\7\1\0\1\6\1\30\1\0\1\7"+
    "\1\0\12\7\2\0\12\7\3\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\12\7\2\0\12\7\7\31\1\32"+
    "\1\33\27\31\10\34\1\35\1\32\26\34\3\0\1\7"+
    "\1\0\2\7\1\36\1\7\1\0\11\7\1\37\2\0"+
    "\12\7\3\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\1\7\1\40\10\7\2\0\12\7\3\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\0\12\7\2\0\1\7\1\41"+
    "\10\7\3\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\12\7\2\0\4\7\1\42\5\7\3\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\0\12\7\2\0\10\7\1\43"+
    "\1\7\3\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\12\7\2\0\7\7\1\44\2\7\3\0\1\7\1\0"+
    "\1\30\1\7\1\0\1\7\1\0\12\7\2\0\12\7"+
    "\1\31\1\0\36\31\1\34\1\0\36\34\7\36\1\45"+
    "\1\46\1\36\2\0\24\36\3\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\12\7\2\0\2\7\1\47\7\7"+
    "\3\0\1\7\1\0\2\7\1\0\1\7\1\0\12\7"+
    "\2\0\5\7\1\50\4\7\3\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\12\7\2\0\2\7\1\51\7\7"+
    "\3\0\1\7\1\0\2\7\1\0\1\7\1\0\12\7"+
    "\2\0\1\7\1\52\10\7\13\0\1\53\24\0\1\36"+
    "\1\0\36\36\3\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\0\12\7\2\0\2\7\1\54\7\7\3\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\0\12\7\2\0\6\7"+
    "\1\55\3\7\3\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\0\12\7\2\0\11\7\1\56\3\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\0\12\7\2\0\6\7\1\57"+
    "\3\7\3\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\12\7\2\0\6\7\1\60\3\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\17\1\2\11\5\1\1\0\1\11\4\0"+
    "\6\1\2\0\4\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WarpScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WarpScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ID;
            } 
            // fall through
          case 24: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 25: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 26: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 27: break;
          case 5: 
            { return INT;
            } 
            // fall through
          case 28: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 29: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 30: break;
          case 8: 
            { return LBRACK;
            } 
            // fall through
          case 31: break;
          case 9: 
            { return RBRACK;
            } 
            // fall through
          case 32: break;
          case 10: 
            { return LPAREN;
            } 
            // fall through
          case 33: break;
          case 11: 
            { return RPAREN;
            } 
            // fall through
          case 34: break;
          case 12: 
            { return VAR_PREFIX;
            } 
            // fall through
          case 35: break;
          case 13: 
            { return MACRO_PREFIX;
            } 
            // fall through
          case 36: break;
          case 14: 
            { return DOUBLE;
            } 
            // fall through
          case 37: break;
          case 15: 
            { return STRING;
            } 
            // fall through
          case 38: break;
          case 16: 
            { return LBLOCK;
            } 
            // fall through
          case 39: break;
          case 17: 
            { return RBLOCK;
            } 
            // fall through
          case 40: break;
          case 18: 
            { return IFT;
            } 
            // fall through
          case 41: break;
          case 19: 
            { return MULSTRING;
            } 
            // fall through
          case 42: break;
          case 20: 
            { return NULL;
            } 
            // fall through
          case 43: break;
          case 21: 
            { return IFTE;
            } 
            // fall through
          case 44: break;
          case 22: 
            { return TRUE;
            } 
            // fall through
          case 45: break;
          case 23: 
            { return FALSE;
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
